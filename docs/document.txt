As I was creating the test directory, I found out that the idea of creating an init file was neccessary. 
so I am creating an init file for all the directories and also in the main depository

I am adding an init file in the depository in the capstone-tps25 directory


Created a test 


I changed my repository name in GitHub and used "git remote -v" to check the current depository url and updated it with  "git remote set-url orgin <new-repo-url>".
With this I will fetch and push to the actual depository. Once I updated the url in my local repo I also updated the name in my local repo


Create a config.py file for storing the API keys
    took the three steps of add, commit, and push to my depository.


Create a data directory
Create a screenshots directory
create a requirements file
Create a docs folder or directory
Create a week11_reflection.md file

write reflection for week 11

add weather application class with basic weather API setup 
It includes constructor with API key, base URL, and default timeout.
Lays foundation for future weather data functionality

Add WeatherProcessor class with Celsius to Fahrenheit Conversion
includes a method to convert temperature from celsius to Fahrenheit.
Prepared for future weather data processing extensions.

Add WeatherStorage class to save city temperature data to file
Includes a meathod to append city and temperature data to 'data.txt'.
Sets up basic persistence for weather information.

Define public API with WeatherAPI, WeatherProcessor, and WeatherStorage

Initialize a Tkinter window 
    - Sets the title to "Weather Dashboard"
    - Sets the window size to 400x300
    - Starts the GUI loop when run as the main script




07/09

commit message for API file:
    refactor(api): convert WeatherAPI to use dataclass and improve structure

after recovering the lost files i aborted a base that caused me to loose the actual api contructed file
this above commit is actually a remake of the orginal i had there.

initiated the storage file:
    feat(storage): add WeatherStorage classs to save weather data to file

build and added my gui file for the next update:
    feat(gui): implement WeatherApp UI with weather fetch and stats display


7/19

adding a unit toggle in the gui
updating the unit option in the raw_data by adding a unit parameter

updating the fetch_weather function to take a units parameter

added the option for "°F" if unit == "imperial" else "°C" in the fe

update fetch_weather function name to handle_weather_request 

add, commit and push origin main 
    main.py
    core/api.py
    docs/document.txt
    gui/weather_gui.py
    
add, commit and push to origin main
    docs/document.txt

add a convert temperature function in the processor.py file in the DataProcessor class

------------------------------------
add, commit and push to origin main
    core/processor.py
    docs/document.txt

==========================

add export_to_csv function in the DataProcessor function

----------------------------

add, commit and push to origin main
    core/processor.py

======================================

updating process_api_response for try and except to make sure units are on point and data is being handled smoothly

update UI's handle_weather_request output part to automatically display unit_symbol

--------------------------------------
add, commit and push to origin main
    core/processor.py
    gui/weather_gui.py
    docs/document.txt

===================================

removed a mph unit that was in the handle_weather_request function
-------------------------- 

add, commit and push to origin main
    gui/weather_gui.py

=================================

removed 'unit_symbol' from handle_weather_request because it wasn't being used.
update document.txt with work flow

---------------------------

add, commit and push to origin main
    gui/weather_gui.py
    docs/document.text

=======================================
built a export_history function that can be used with the export to csv button in the gui
in the WeatherApp in weather_gui.py file

a filepath codition that handle for error and connects with the export_to_csv function in the 
processor.py file

make sure the export_to_csv method in processor.py handles empty input gracefully

--------------------------------------
add, commit and push to origin main
    core/processor.py
    gui/weather_gui.py
    docs/document.txt

===================================

edit a spelling in gui/weather_gui.py

--------------------------------------
add, commit and push to origin main
    gui/weather_gui.py
    docs/document.txt

===================================

















example test

why write Tests
-- Simulate possible edge cases

-- catch & Track Breaking Changes
    when start working with an app that has multiple parts 

 AI can write tests well
 There are great way of writing tests

Unit testing and integration testing